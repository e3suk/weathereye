---
- name: Install SURFACE
  hosts: local
  become: true # not granting root privileges

  # please note that 'become: true' is for use WITHOUT escalated privileges while 'become: false' is for use WITH escalated privileges

  tasks:  
    # System checks
    - name: System Checks
      block:
        - name: Check Supported Systems
          ansible.builtin.fail:
            msg: This host system is currently not supported. See docs.weathereye.org for supported operating systems and distributions.
          when: ansible_facts['distribution'] != "Ubuntu" or ansible_facts['distribution_version'] != "22.04"



    # Prep the system for surface installation
    - name: System Prep
      block:
        - name: Update apt cache
          apt:
            update_cache: true
        
        - name: Install required system packages
          apt:
            pkg:
              - apt-transport-https
              - ca-certificates
              - curl
              - software-properties-common
              - python3-pip
              - virtualenv
              - git
              - python3-setuptools
              - openjdk-11-jdk
            state: latest

        - name: Remove docker-ce
          apt:
            name: docker-ce
            state: absent

        - name: Add Docker GPG apt Key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

        - name: Add Docker Repository
          apt_repository:
            repo: deb https://download.docker.com/linux/ubuntu jammy stable
            state: present

        - name: Install docker-ce
          apt:
            name: docker-ce
            state: latest

        - name: Install Docker Module for Python
          pip:
            name: docker

        # - name: Add user to the Docker group
        #   ansible.builtin.shell: |
        #     usermod -aG docker ${USER}
      become: false



    # Retrieve neccessary files and set required permissions for SURFACE installation
    - name: SUFACE Prep
      block:
        - name: Tear down existing Docker services (if any) remove orphans and volumes
          community.docker.docker_compose_v2:
            project_src: "{{ surface_repo_path }}"
            build: never
            state: absent
            remove_images: all
            remove_orphans: true
            remove_volumes: true
          become: false
          ignore_errors: true

        - name: Remove old SUFACE directory clones
          ansible.builtin.file:
            path: "{{ surface_repo_path }}"
            state: absent
          become: false

        - name: Clone SURFACE Repository
          ansible.builtin.git:
            repo: https://github.com/opencdms/surface.git
            dest: "{{ surface_repo_path }}"
            force: true
            single_branch: true
            version: development

        - name: Remove example SUFACE config file (production.env.example)
          ansible.builtin.file:
            path: "{{ surface_repo_path }}api/production.env.example"
            state: absent
          become: false

        - name: Add SURFACE config file (production.env)
          ansible.builtin.copy:
            src: "{{ prod_env_path }}"
            dest: "{{ surface_repo_path }}api/"

        # - name: Ensure static directory permissions are correct
        #   ansible.builtin.command:
        #     cmd: chmod -R a+rwx "{{ surface_repo_path }}api/static"
        #   become: false



    # LRGS SETUP
    - name: LRGS setup
      block:
        # copy the neccessary files
        - name: Copy lrgs install .jar file
          ansible.builtin.copy:
            src: "{{ lrgs_install_jar }}"
            dest: "{{ surface_repo_path }}"

        - name: Copy lrgs installation script
          ansible.builtin.copy:
            src: "{{ lrgs_installation_script }}"
            dest: "{{ surface_repo_path }}"  

        # modify the installation script
        - name: Ensure correct LRGS install location is set
          ansible.builtin.replace:
            path: "{{ surface_repo_path }}LRGS-installation-script"
            regexp: '#PATH-TO-LRGSCLIENT-FOLDER'
            replace: "{{ LRGSClient_path }}"

        # install LRGS client
        - name: Install LRGS Client
          ansible.builtin.shell: java -jar lrgs-client-install-6-2-RC03.jar LRGS-installation-script
          args:
            chdir: "{{ surface_repo_path }}"

        # modify the decj file in the LRGS Client
        - name: Modify decj file in LRGS Client
          ansible.builtin.replace:
            path: "{{ lrgs_decj }}"
            regexp: '/api'
            replace: ''

        # modify the getDcpMessages file in the LRGS Client
        - name: Modify getDcpMessages file in LRGS Client
          ansible.builtin.replace:
            path: "{{ lrgs_getDcpMessages }}"
            regexp: '/api'
            replace: ''

        # modify the msgaccess file in the LRGS Client
        - name: Modify msgaccess file in LRGS Client
          ansible.builtin.replace:
            path: "{{ lrgs_msgaccess }}"
            regexp: '/api'
            replace: ''

        # modify the rtstat file in the LRGS Client
        - name: Modify rtstat file in LRGS Client
          ansible.builtin.replace:
            path: "{{ lrgs_rtstat }}"
            regexp: '/api'
            replace: ''

        # remove the neccessary files after use
        - name: Remove lrgs install .jar file
          ansible.builtin.file:
            path: "{{ surface_repo_path }}lrgs-client-install-6-2-RC03.jar"
            state: absent
          become: false

        - name: Remove lrgs installation script
          ansible.builtin.file:
            path: "{{ surface_repo_path }}LRGS-installation-script"
            state: absent
          become: false
      when: enable_lrgs in ['true', 'True', 'TRUE']



    # Start containers and services
    - name: Start Docker services
      block:
        - name: Creating and starting Docker services (This may take a while...)
          community.docker.docker_compose_v2:
            project_src: "{{ surface_repo_path }}"
            build: always
            state: present
            services:
              - postgres
              - cache
              - redis
              - api

        - name: Start Without Data (This may take a while...)
          ansible.builtin.shell: docker compose exec api bash load_initial_data.sh
          args:
            chdir: "{{ surface_repo_path }}"
          when: with_data in ['no', 'No', 'NO']

        - name: Start With Data (This may take a while...)
          ansible.builtin.shell: docker compose exec -T postgres psql -U dba -d surface_db < "{{ data_path }}"
          args:
            chdir: "{{ surface_repo_path }}"
          when: with_data in ['yes', 'Yes', 'YES']     
      become: false



    # Verify file permissions and ownership
    - name: Verify file permissions and ownership inside containers
      block:
        - name: Verify the data dir
          ansible.builtin.shell: docker compose exec --user root api bash -c "chown -R surface /data"
          args:
            chdir: "{{ surface_repo_path }}"

        - name: Verify the surface dir
          ansible.builtin.shell: docker compose exec --user root api bash -c "chown -R surface:surface /surface"
          args:
            chdir: "{{ surface_repo_path }}"
      become: false



    # Collect Static files and create admin user
    - name: Collect static files and create the SURFACE admin user
      block:
        - name: Collect Static Files
          ansible.builtin.shell: docker compose exec api python manage.py collectstatic --noinput
          args:
            chdir: "{{ surface_repo_path }}"

        - name: Create Admin User
          ansible.builtin.shell: docker compose exec api sh -c "export DJANGO_SUPERUSER_USERNAME='{{ admin }}' && export DJANGO_SUPERUSER_EMAIL='{{ admin_email }}' && export DJANGO_SUPERUSER_PASSWORD='{{ admin_password }}' && python manage.py createsuperuser --noinput"
          args:
            chdir: "{{ surface_repo_path }}"
      become: false



    # Restart all containers and services
    - name: Restart containers
      block:
        - name: Stopping all containers
          community.docker.docker_compose_v2:
            project_src: "{{ surface_repo_path }}"
            state: stopped


        # Starting SURFACE
        - name: Starting up SURFACE
          community.docker.docker_compose_v2:
            project_src: "{{ surface_repo_path }}"
            state: present

        - name: SURFACE installation complete!
          ansible.builtin.pause:
            seconds: 2
      become: false