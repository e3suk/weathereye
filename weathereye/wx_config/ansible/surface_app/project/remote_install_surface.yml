---
- name: Install SURFACE
  hosts: remote
  become: false # not granting root privileges


  tasks: 
    - name: Check Supported Systems
      ansible.builtin.fail:
        msg: The remote machine's system is currently not supported. See docs.weathereye.org for supported operating systems and distributions.
      when: ansible_facts['distribution'] != "Ubuntu" or ansible_facts['distribution_version'] != "22.04"

    - name: Update apt cache
      apt:
        update_cache: true
      become: true

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - git
          - python3-setuptools
          - openjdk-11-jdk
        state: latest
      become: true

    - name: Remove docker-ce
      apt:
        name: docker-ce
        state: absent
      become: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      become: true

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present
      become: true

    - name: Install docker-ce
      apt:
        name: docker-ce
        state: latest
      become: true

    - name: Tear down existing Docker services (if any) remove orphans and volumes
      community.docker.docker_compose_v2:
        project_src: "{{ surface_repo_path }}"
        build: never
        state: absent
        remove_images: all
        remove_orphans: true
        remove_volumes: true
      ignore_errors: true
      become: true



    - name: Remove old SUFACE directory clones
      ansible.builtin.file:
        path: "{{ surface_repo_path }}"
        state: absent
      become: true
      

    - name: Clone SURFACE Repository
      ansible.builtin.git:
        repo: https://github.com/opencdms/surface.git
        dest: "{{ surface_repo_path }}"
        force: true

    
    - name: Ensure static directory permissions are correct
      ansible.builtin.command:
        cmd: chmod -R a+rwx "{{ surface_repo_path }}api/static"
      become: true


    - name: Remove example SUFACE config file (production.env.example)
      ansible.builtin.file:
        path: "{{ surface_repo_path }}api/production.env.example"
        state: absent
      become: true


    - name: Add SURFACE config file (production.env)
      ansible.builtin.copy:
        src: "{{ prod_env_path }}"
        dest: "{{ surface_repo_path }}api/"


    - name: Ensure pip version is less than 24.1 in Dockerfile
      ansible.builtin.lineinfile:
        path: "{{ surface_repo_path }}api/Dockerfile"
        regexp: '^RUN pip install -U pip setuptools wheel$'
        line: 'RUN pip install -U "pip<24.1" setuptools wheel'

    - name: Ensure --force-reinstall flag is added to numpy installation in Dockerfile
      lineinfile:
        path: "{{ surface_repo_path }}api/Dockerfile"
        regexp: '^RUN pip install numpy==1.21.2$'
        line: 'RUN pip install numpy==1.21.2 --force-reinstall'

    - name: Ensure numpy is added to the end of requirements.txt
      lineinfile:
        path: "{{ surface_repo_path }}api/requirements.txt"
        line: 'numpy==1.21.2'
        insertafter: EOF




    - name: Creating and starting Docker services (This may take a while...)
      community.docker.docker_compose_v2:
        project_src: "{{ surface_repo_path }}"
        build: always
        state: present
        services:
          - postgres
          - cache
          - redis
          - api
      become: true

    - name: Start Without Data (This may take a while...)
      ansible.builtin.shell: docker compose exec api bash load_initial_data.sh
      args:
        chdir: "{{ surface_repo_path }}"
      when: with_data in ['no', 'No', 'NO']
      become: true

    - name: Copy Data file to remote machine
      ansible.builtin.copy:
        src: "{{ data_path }}"
        dest: "{{ surface_repo_path }}"
      when: with_data in ['yes', 'Yes', 'YES']

    - name: Start With Data (This may take a while...)
      ansible.builtin.shell: docker compose exec -T postgres psql -U dba -d surface_db < "{{ surface_repo_path  }}/{{ data_file_name }}"
      args:
        chdir: "{{ surface_repo_path }}"
      when: with_data in ['yes', 'Yes', 'YES']
      become: true

    # - name: Remove data file
    #   ansible.builtin.file:
    #     path:
    #     state:

    - name: Collect Static Files
      ansible.builtin.shell: docker compose exec api python manage.py collectstatic --noinput
      args:
        chdir: "{{ surface_repo_path }}"
      become: true

    - name: Create Admin User
      ansible.builtin.shell: docker compose exec api sh -c "export DJANGO_SUPERUSER_USERNAME='{{ admin }}' && export DJANGO_SUPERUSER_EMAIL='{{ admin_email }}' && export DJANGO_SUPERUSER_PASSWORD='{{ admin_password }}' && python manage.py createsuperuser --noinput"
      args:
        chdir: "{{ surface_repo_path }}"
      become: true

    - name: Stopping all containers
      community.docker.docker_compose_v2:
        project_src: "{{ surface_repo_path }}"
        state: stopped
      become: true





    # LRGS SETUP
    - name: LRGS setup
      block:
        # copy the neccessary files
        - name: Copy lrgs install .jar file
          ansible.builtin.copy:
            src: "{{ lrgs_install_jar }}"
            dest: "{{ surface_repo_path }}"

        - name: Copy lrgs installation script
          ansible.builtin.copy:
            src: "{{ lrgs_installation_script }}"
            dest: "{{ surface_repo_path }}"  

        # modify the installation script
        - name: Ensure correct LRGS install location is set
          ansible.builtin.replace:
            path: "{{ surface_repo_path }}LRGS-installation-script"
            regexp: '#PATH-TO-LRGSCLIENT-FOLDER'
            replace: "{{ LRGSClient_path }}"

        # ensure that the LRGSClient folder has the correct permissions
        - name: Ensure LRGSClient directory permissions are correct
          ansible.builtin.command:
            cmd: chmod -R a+rwx "{{ LRGSClient_path }}"
          become: true

        # install LRGS client
        - name: Install LRGS Client
          ansible.builtin.shell: java -jar lrgs-client-install-6-2-RC03.jar LRGS-installation-script
          args:
            chdir: "{{ surface_repo_path }}"

        # modify the decj file in the LRGS Client
        - name: Modify decj file in LRGS Client
          ansible.builtin.replace:
            path: "{{ lrgs_decj }}"
            regexp: '/api'
            replace: ''

        # modify the getDcpMessages file in the LRGS Client
        - name: Modify getDcpMessages file in LRGS Client
          ansible.builtin.replace:
            path: "{{ lrgs_getDcpMessages }}"
            regexp: '/api'
            replace: ''

        # modify the msgaccess file in the LRGS Client
        - name: Modify msgaccess file in LRGS Client
          ansible.builtin.replace:
            path: "{{ lrgs_msgaccess }}"
            regexp: '/api'
            replace: ''

        # modify the rtstat file in the LRGS Client
        - name: Modify rtstat file in LRGS Client
          ansible.builtin.replace:
            path: "{{ lrgs_rtstat }}"
            regexp: '/api'
            replace: ''

        # remove the neccessary files after use
        - name: Remove lrgs install .jar file
          ansible.builtin.file:
            path: "{{ surface_repo_path }}lrgs-client-install-6-2-RC03.jar"
            state: absent
          become: true

        - name: Remove lrgs installation script
          ansible.builtin.file:
            path: "{{ surface_repo_path }}LRGS-installation-script"
            state: absent
          become: true
      when: enable_lrgs in ['true', 'True', 'TRUE']
    # LRGS Setup end





    - name: Starting up SURFACE
      community.docker.docker_compose_v2:
        project_src: "{{ surface_repo_path }}"
        state: present
      become: true

    - name: SURFACE installation complete!
      ansible.builtin.pause:
        seconds: 2