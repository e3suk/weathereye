---
- name: Check Supported Systems
  hosts: local
  gather_facts: true
  become: false # granting root privileges

  tasks:
  # display Users system information
    - name: System
      ansible.builtin.debug:
        msg: The distribution is "{{ ansible_facts['distribution'] }}" and the version is "{{ ansible_facts['distribution_version'] }}"
      
  # Users system must be a Mac or Ubuntu system
    - name: System check
      ansible.builtin.fail:
        msg: This host system is currently not supported. See docs.weathereye.org for supported operating systems and distributions.
      when: ansible_distribution not in ['MacOSX', 'Ubuntu']


- name: Configure SURFACE
  hosts: local
  become: true # granting root privileges

  tasks:
  # shutdown old configuration sites that may still be running
    - name: Shut down stale configuration site
      ansible.builtin.uri:
        url: http://localhost:52376/shutdown/
        method: GET
        force: true
        status_code: 200
      ignore_errors: true

  # downloading redis and pip on mac machines
    - name: Install required packages (MacOSX)
      community.general.homebrew:
        name: redis
        state: present
        update_homebrew: true
      when: ansible_distribution in ['MacOSX']

  # downloading redis and pip on ubuntu machines
    - name: Update apt cache
      apt:
        update_cache: true
      retries: 2
      delay: 60 # Wait 1 minute between retires
      when: ansible_distribution in ['Ubuntu']

    - name: Install required packages (Ubuntu)
      apt:
        pkg:
          - redis
          - sshpass
        state: latest
      when: ansible_distribution in ['Ubuntu']

  # start redis
    - name: Start redis
      ansible.builtin.shell: redis-server --port 52377
      async: 10800
      poll: 0

  # run database migrations
    - name: Make migrations
      community.general.django_manage:
        command: resetdb
        project_path: "{{ django_webapp_path }}"
        virtualenv: "{{ venv_path }}"

  # Start configuration site
    - name: Start configuration site
      shell: python3 manage.py runserver localhost:52376
      args:
        chdir: "{{ django_webapp_path }}"
      async: 10800
      poll: 0

  # start celery worker
    - name: Start celery worker
      ansible.builtin.shell: python3 -m celery -A wx_config worker
      args:
        chdir: "{{ django_webapp_path }}"
      async: 10800
      poll: 0

    - name: Wait for the server to start
      ansible.builtin.pause:
        seconds: 5

    - name: Reload configuration site
      ansible.builtin.uri:
        url: http://localhost:52376/
        method: GET
        force: true
        status_code: 200
