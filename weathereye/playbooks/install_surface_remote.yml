---
- name: Install SURFACE
  hosts: all
  become: true # granting root privileges

  tasks:  
      - name: Check Supported Systems
        ansible.builtin.fail:
          msg: The remote machine's system is currently not supported. See docs.weathereye.org for supported operating systems and distributions.
        when: ansible_facts['distribution'] != "Ubuntu" or ansible_facts['distribution_version'] != "22.04"
     
      - name: Get SURFACE repo path
        ansible.builtin.pause:
          prompt: Enter the Absolute Path to a folder on the remote machine to clone the SURFACE Repository
        register: surface_repo_path

      - name: Start SURFACE with data
        ansible.builtin.pause:
          prompt: Do you want to start containers with data? (yes/no)
        register: with_data
        until: with_data.user_input in ['yes', 'no', 'Yes', 'No', 'YES', 'NO']
        delay: 2

      - name: Get data file path
        ansible.builtin.pause:
          prompt: Enter the Absolute Path to the data file
        register: data_path
        when: with_data.user_input == "yes"
 
      - name: Update apt cache
        apt:
          update_cache: true
        retries: 2
        delay: 60 # Wait 1 minute between retires

      - name: Install required system packages
        apt:
          pkg:
            - apt-transport-https
            - ca-certificates
            - curl
            - software-properties-common
            - python3-pip
            - virtualenv
            - python3-setuptools
          state: latest

      - name: Add Docker GPG apt Key
        apt_key:
          url: https://download.docker.com/linux/ubuntu/gpg
          state: present

      - name: Add Docker Repository
        apt_repository:
          repo: deb https://download.docker.com/linux/ubuntu jammy stable
          state: present

      - name: Install docker-ce
        apt:
          name: docker-ce
          state: latest

      - name: Install Docker Module for Python
        pip:
          name: docker

      - name: Clone SURFACE Repository
        ansible.builtin.git:
          repo: https://github.com/opencdms/surface.git
          dest: "{{ surface_repo_path.user_input }}"
        become: false

      - name: Configure Environment Variables
        ansible.builtin.pause:
          prompt: IMPORTANT! Configure environment variables in ‘surface/api/production.env’ file before moving on. Then press ENTER. (see Step 3 of SURFACE installation guide)

      - name: Creating and starting Docker services
        community.docker.docker_compose_v2:
          project_src: "{{ surface_repo_path.user_input }}"
          files: docker-compose.yml
          build: always
          state: present
          services:
            - postgres
            - cache
            - redis
            - api
        async: 7200
        poll: 0
        register: docker_services_output

      - name: Docker services
        ansible.builtin.async_status:
          jid: "{{ docker_services_output.ansible_job_id }}"
        register: docker_services_progress
        until: docker_services_progress.finished
        retries: 100
        delay: 120

      - name: Start Without Data
        ansible.builtin.shell: docker compose exec api bash load_initial_data.sh
        args:
          chdir: "{{ surface_repo_path.user_input }}"
        when: with_data.user_input in ['no', 'No', 'NO']

      - name: Start With Data
        ansible.builtin.shell: docker compose exec -T postgres psql -U dba -d surface_db < "{{ data_path.user_input }}"
        args:
          chdir: "{{ surface_repo_path.user_input }}"
        when: with_data.user_input in ['yes', 'Yes', 'YES']

      - name: Collect Static Files
        ansible.builtin.shell: docker compose exec api python manage.py collectstatic --noinput
        args:
          chdir: "{{ surface_repo_path.user_input }}"

      - name: Create admin username
        ansible.builtin.pause:
          prompt: Admin Username
        register: admin

      - name: Create admin email address
        ansible.builtin.pause:
          prompt: Admin Email Address
        register: admin_email

      - name: Create admin password
        ansible.builtin.pause:
          prompt: Admin password
          echo: no
        register: admin_password

      - name: Create Admin User
        ansible.builtin.shell: docker compose exec api sh -c "export DJANGO_SUPERUSER_USERNAME='{{ admin.user_input }}' && export DJANGO_SUPERUSER_EMAIL='{{ admin_email.user_input }}' && export DJANGO_SUPERUSER_PASSWORD='{{ admin_password.user_input }}' && python manage.py createsuperuser --noinput"
        args:
          chdir: "{{ surface_repo_path.user_input }}"

      - name: Stopping all containers
        community.docker.docker_compose_v2:
          project_src: "{{ surface_repo_path.user_input }}"
          state: stopped

      - name: Starting up SURFACE
        community.docker.docker_compose_v2:
          project_src: "{{ surface_repo_path.user_input }}"
          state: present

      - name: Open SURFACE
        ansible.builtin.pause:
          prompt: SURFACE install complete. SURFACE can now be opened in the browser